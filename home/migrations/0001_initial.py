# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-05-11 07:34
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('gender', models.CharField(choices=[('m', 'Male'), ('f', 'Female')], default='m', max_length=1, verbose_name='Gender')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='Phone Number')),
                ('about_me', models.TextField(blank=True, null=True, verbose_name='About Me')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=b'', verbose_name='Profile Image')),
                ('home_town', models.CharField(blank=True, max_length=100, null=True, verbose_name='Home Town')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Place')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='City')),
                ('pin', models.CharField(blank=True, max_length=10, null=True, verbose_name='Pin')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('website', models.CharField(blank=True, max_length=100, null=True, verbose_name='Website')),
                ('career_objective', models.TextField(blank=True, null=True, verbose_name='Career Objective')),
                ('employment_profile', models.TextField(blank=True, null=True, verbose_name='Employment Profile')),
                ('academic_record', models.TextField(blank=True, null=True, verbose_name='Academic Records')),
                ('personal_skills', models.TextField(blank=True, null=True, verbose_name='Personal Skills')),
                ('number_of_clients', models.IntegerField(blank=True, null=True)),
                ('number_of_projects', models.IntegerField(blank=True, null=True)),
                ('number_of_lines_of_code', models.IntegerField(blank=True, null=True)),
                ('facebook', models.URLField(blank=True, max_length=100, null=True, verbose_name='Facebook')),
                ('twitter', models.URLField(blank=True, max_length=100, null=True, verbose_name='Twitter')),
                ('linked_in', models.URLField(blank=True, max_length=100, null=True, verbose_name='LinkedIn')),
                ('stack_overflow', models.URLField(blank=True, max_length=100, null=True, verbose_name='StackOverflow')),
                ('github', models.URLField(blank=True, max_length=100, null=True, verbose_name='Github')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Items',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.ImageField(upload_to=b'')),
                ('description', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TechnicalExpertise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('items', models.ManyToManyField(to='home.Items')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
